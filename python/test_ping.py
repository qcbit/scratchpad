"""
Ping sweeper tests.
"""
import os, sys
sys.path.insert(0, os.pardir+'/app')
import ipaddr_util
from unittest import TestCase, main


class Ping_Test(TestCase):
    """
    This defines the tests to validate the ping sweep program.
    """
    def test_setup(self):
        """
        Test setup goes here.
        """
        pass

    def test_teardown(self):
        """
        Test teardown goes here.
        """
        pass

    def test_get_number_of_hosts_with_netmask(self):
        """
        Test getting the number of hosts with various known netmask values.
        """
        hosts_per_subnet = {
                '255.0.0.0':16777214,
                '255.128.0.0':8388606,
                '255.192.0.0':4194302,
                '255.224.0.0':2097150,
                '255.240.0.0':1048574,
                '255.248.0.0':524286,
                '255.252.0.0':262142,
                '255.254.0.0':131070,
                '255.255.0.0':65534,
                '255.255.128.0':32766,
                '255.255.192.0':16382,
                '255.255.224.0':8190,
                '255.255.240.0':4094,
                '255.255.248.0':2046,
                '255.255.252.0':1022,
                '255.255.254.0':510,
                '255.255.255.0':254,
                '255.255.255.128':126,
                '255.255.255.192':62,
                '255.255.255.224':30,
                '255.255.255.240':14,
                '255.255.255.248':6,
                '255.255.255.252':2,
                '255.255.255.254':0
                }
        octets = ['255', '0', '0', '0']
        subnetmasks = []
        subnetmasks.append('.'.join(octets))
        for octet in range(1, len(octets)):
            j = 0
            for i in range(7, -1, -1):
                j |= 1 << i
                octets[octet] = str(j)
                subnetmasks.append('.'.join(octets))

        subnetmasks.pop() # Remove '255.255.255.255'
        for netmask in subnetmasks:
            self.assertEqual(hosts_per_subnet[netmask],\
                    ipaddr_util.get_number_of_hosts(netmask))

    def test_validity(self):
        """
        Test values are valid or not.
        """
        invalid_values = ['a', 'aaa', '-1', 256, '256', -1, 33, '33', 'a10', '1f0', '255.aaa.0.255', 'aaa.bbb.ccc.ddd', 'aaa.bbb', '255.255.255.255.255']
        for value in invalid_values:
            print "Testing:", value
            self.assertNotEqual(ipaddr_util.is_valid(value), True)

        valid_values = [0, '0', 32, '32', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '255.255.255.255', '0.0.0.0']
        for value in valid_values:
            print "Testing:", value
            self.assertEqual(ipaddr_util.is_valid(value), True)

    def test_get_subnet_bits(self):
        """
        Test if returned bits are correct for number of subnets.
        """
        keys_values = {
                1:'10000000.00000000.00000000.00000000',
                2:'11000000.00000000.00000000.00000000',
                3:'11100000.00000000.00000000.00000000',
                4:'11110000.00000000.00000000.00000000',
                5:'11111000.00000000.00000000.00000000',
                6:'11111100.00000000.00000000.00000000',
                7:'11111110.00000000.00000000.00000000',
                8:'11111111.00000000.00000000.00000000',
                9:'11111111.10000000.00000000.00000000',
                10:'11111111.11000000.00000000.00000000',
                11:'11111111.11100000.00000000.00000000',
                12:'11111111.11110000.00000000.00000000',
                13:'11111111.11111000.00000000.00000000',
                14:'11111111.11111100.00000000.00000000',
                15:'11111111.11111110.00000000.00000000',
                16:'11111111.11111111.00000000.00000000',
                17:'11111111.11111111.10000000.00000000',
                18:'11111111.11111111.11000000.00000000',
                19:'11111111.11111111.11100000.00000000',
                20:'11111111.11111111.11110000.00000000',
                21:'11111111.11111111.11111000.00000000',
                22:'11111111.11111111.11111100.00000000',
                23:'11111111.11111111.11111110.00000000',
                24:'11111111.11111111.11111111.00000000',
                25:'11111111.11111111.11111111.10000000',
                26:'11111111.11111111.11111111.11000000',
                27:'11111111.11111111.11111111.11100000',
                28:'11111111.11111111.11111111.11110000',
                29:'11111111.11111111.11111111.11111000',
                30:'11111111.11111111.11111111.11111100',
                31:'11111111.11111111.11111111.11111110',
                32:'11111111.11111111.11111111.11111111',
                '1':'10000000.00000000.00000000.00000000',
                '2':'11000000.00000000.00000000.00000000',
                '3':'11100000.00000000.00000000.00000000',
                '4':'11110000.00000000.00000000.00000000',
                '5':'11111000.00000000.00000000.00000000',
                '6':'11111100.00000000.00000000.00000000',
                '7':'11111110.00000000.00000000.00000000',
                '8':'11111111.00000000.00000000.00000000',
                '9':'11111111.10000000.00000000.00000000',
                '10':'11111111.11000000.00000000.00000000',
                '11':'11111111.11100000.00000000.00000000',
                '12':'11111111.11110000.00000000.00000000',
                '13':'11111111.11111000.00000000.00000000',
                '14':'11111111.11111100.00000000.00000000',
                '15':'11111111.11111110.00000000.00000000',
                '16':'11111111.11111111.00000000.00000000',
                '17':'11111111.11111111.10000000.00000000',
                '18':'11111111.11111111.11000000.00000000',
                '19':'11111111.11111111.11100000.00000000',
                '20':'11111111.11111111.11110000.00000000',
                '21':'11111111.11111111.11111000.00000000',
                '22':'11111111.11111111.11111100.00000000',
                '23':'11111111.11111111.11111110.00000000',
                '24':'11111111.11111111.11111111.00000000',
                '25':'11111111.11111111.11111111.10000000',
                '26':'11111111.11111111.11111111.11000000',
                '27':'11111111.11111111.11111111.11100000',
                '28':'11111111.11111111.11111111.11110000',
                '29':'11111111.11111111.11111111.11111000',
                '30':'11111111.11111111.11111111.11111100',
                '31':'11111111.11111111.11111111.11111110',
                '32':'11111111.11111111.11111111.11111111'
                }
#        for k, v in keys_values.items():
#            print "Testing k,v:", k, v
#            self.assertEqual(keys_values[k], '.'.join(ipaddr_util.get_subnet_bits(k)))
        pass

    def test_get_binary_bits(self):
        """
        Test if returned bits are correct.
        """
        keys_values = {
                '255.255.255.255':'11111111.11111111.11111111.11111111',
                '255.255.255.128':'11111111.11111111.11111111.10000000',
                '255.255.255.192':'11111111.11111111.11111111.11000000',
                '255.255.255.224':'11111111.11111111.11111111.11100000',
                '255.255.255.240':'11111111.11111111.11111111.11110000',
                '255.255.255.248':'11111111.11111111.11111111.11111000',
                '255.255.255.252':'11111111.11111111.11111111.11111100',
                '255.255.255.254':'11111111.11111111.11111111.11111110',
                '255.255.255.255':'11111111.11111111.11111111.11111111'
                }

        for k, v in keys_values.items():
            print "Testing k,v:", k, v
            self.assertEqual(keys_values[k], '.'.join(ipaddr_util.get_binary_bits(k)))

    def test_get_host_bits(self):
        """
        Test the returned host bits are correct.
        """
        subnet_host_bits = {
                '255.0.0.0': 24,
                '255.128.0.0': 23,
                '255.192.0.0': 22,
                '255.224.0.0': 21,
                '255.240.0.0': 20,
                '255.248.0.0': 19,
                '255.252.0.0': 18,
                '255.254.0.0': 17,
                '255.255.0.0': 16,
                '255.255.128.0': 15,
                '255.255.192.0': 14,
                '255.255.224.0': 13,
                '255.255.240.0': 12,
                '255.255.248.0': 11,
                '255.255.252.0': 10,
                '255.255.254.0': 9,
                '255.255.255.0': 8,
                '255.255.255.128': 7,
                '255.255.255.192': 6,
                '255.255.255.224': 5,
                '255.255.255.240': 4,
                '255.255.255.248': 3,
                '255.255.255.252': 2,
                '255.255.255.254': 1
                }
        for k, v in subnet_host_bits.items():
            print "Testing should get %s host bits for subnet %s" % (v, k)
            self.assertEqual(subnet_host_bits[k], ipaddr_util.get_host_bits(k))

    def test_convert_cidr_to_netmask(self):
        """
        Test the returned netmask matches the cidr.
        """
        cidr_netmask = {
                1  : '128.0.0.0',
                2  : '192.0.0.0',
                3  : '224.0.0.0',
                4  : '240.0.0.0',
                5  : '248.0.0.0',
                6  : '252.0.0.0',
                7  : '254.0.0.0',
                8  : '255.0.0.0',
                9  : '255.128.0.0',
                10 : '255.192.0.0',
                11 : '255.224.0.0',
                12 : '255.240.0.0',
                13 : '255.248.0.0',
                14 : '255.252.0.0',
                15 : '255.254.0.0',
                16 : '255.255.0.0',
                17 : '255.255.128.0',
                18 : '255.255.192.0',
                19 : '255.255.224.0',
                20 : '255.255.240.0',
                21 : '255.255.248.0',
                22 : '255.255.252.0',
                23 : '255.255.254.0',
                24 : '255.255.255.0',
                25 : '255.255.255.128',
                26 : '255.255.255.192',
                27 : '255.255.255.224',
                28 : '255.255.255.240',
                29 : '255.255.255.248',
                30 : '255.255.255.252',
                31 : '255.255.255.254'
                }
        for k, v in cidr_netmask.items():
            print "Testing should get %s netmask for cidr %s" % (v, k)
            self.assertEqual(cidr_netmask[k], ipaddr_util.convert_cidr_to_netmask(k))

if __name__ == '__main__':
    main()
